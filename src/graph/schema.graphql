type UserDetails {
  id: ID!
  createdAt: String
  updatedAt: String
  userId: String
  firstName: String
  lastName: String
  nickname: String
  dob: String
  pronouns: [String]
  educationLevel: String
  occupation: String
  interests: [String]
  learningStyle: String
  seenOnboarding: Boolean
  nightMode: Boolean
}

type PrereqTopic {
  id: ID!
  createdAt: String!
  updatedAt: String!
  prereqId: String!
  prereq: CoursePrereq!
  title: String!
  description: String!
}

type CoursePrereq {
  id: ID!
  createdAt: String!
  updatedAt: String!
  courseId: String!
  course: Course!
  title: String!
  description: String!
  topics: [PrereqTopic]!
}

type UnitLesson {
  id: ID!
  createdAt: String!
  updatedAt: String!
  unitId: String!
  unit: CourseUnit!
  title: String!
  topics: String!
  content: String!
  order: Int!
}

type UnitExercise {
  id: ID!
  createdAt: String!
  updatedAt: String!
  unitId: String!
  unit: CourseUnit!
  task: String!
}

type QuizQuestion {
  id: ID!
  createdAt: String!
  updatedAt: String!
  unitId: String!
  unit: CourseUnit!
  question: String!
  choices: [String]!
  answer: String!
}

type UnitQuiz {
  id: ID!
  createdAt: String!
  updatedAt: String!
  unitId: String!
  unit: CourseUnit!
  questions: [QuizQuestion]!
}

type CourseUnit {
  id: ID!
  createdAt: String!
  updatedAt: String!
  courseId: String!
  course: Course!
  title: String!
  description: String!
  lessons: [UnitLesson]!
  exercises: [UnitExercise]
  quizzes: [UnitQuiz]!
  order: Int!
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

type QuizResponse {
  id: ID!
  createdAt: String!
  updatedAt: String!
  response: String!
  questionId: String!
  question: QuizQuestion!
  quizAttemptId: String!
  quizAttempt: QuizAttempt!
}

type QuizAttempt {
  id: ID!
  createdAt: String!
  updatedAt: String!
  status: Status!
  attempt: Int!
  responses: [QuizResponse]!
  quizId: String!
  quiz: UnitQuiz!
  courseProgressId: String!
  courseProgress: CourseProgress!
}

type CourseProgress {
  id: ID!
  createdAt: String!
  updatedAt: String!
  enrollmentId: String!
  enrollment: CourseEnrollment!
  lessonsCompleted: [String]!
  exercisesCompleted: [String]!
  quizAttempts: [QuizAttempt]!
  status: Status!
  currentLessonId: String
}

type CourseEnrollment {
  id: ID!
  createdAt: String!
  updatedAt: String!
  userId: String!
  courseId: String!
  course: Course!
  progress: CourseProgress
}

type Course {
  id: ID!
  createdAt: String!
  updatedAt: String!
  authorId: String!
  title: String!
  description: String!
  prereqs: [CoursePrereq]!
  units: [CourseUnit]!
  enrollments: [CourseEnrollment]!
  public: Boolean!
}

input CreateCourseInput {
  authorId: ID!
  title: String!
  description: String!
}

input GenerateLessonInput {
  courseTitle: String!
  courseDescription: String!
  lessonId: String!
  lessonTitle: String!
  topics: String!
  pastTopics: String!
}

input UpdateUserDetailsInput {
  firstName: String
  lastName: String
  nickname: String
  dob: String
  pronouns: [String]
  educationLevel: String
  occupation: String
  interests: [String]
  learningStyle: String
  nightMode: Boolean
}

input UpdateCurrentLessonIdInput {
  userId: String!
  courseId: String!
  lessonId: String!
}

input UpdateCompletedLessonsInput {
  userId: String!
  courseId: String!
  lessonId: String!
}

input UpdateQuizAttemptInput {
  questionId: String!
  response: String
  status: Status
}

input CreateQuizAttemptInput {
  quizId: String!
  questionId: String!
  courseProgressId: String!
  attempt: Int!
  response: String!
}

type Query {
  course(id: String!): Course
  courses(authorId: String!): [Course]!
  enrollment(userId: String!, courseId: String!): CourseEnrollment!
  enrolledIn(userId: String!): [CourseEnrollment]!
  allCourses: [Course]
  userDetails(userId: String!): UserDetails
}

type Mutation {
  createCourse(input: CreateCourseInput!): Course!
  deleteCourse(id: String!): Course!
  createGeneratePrereqsJob(id: String!): Course!
  generatePrereqs(id: String!): Course!
  generateUnits(id: String!): Course!
  generateExercises(id: String!): [UnitExercise]!
  generateQuiz(id: String!): UnitQuiz!
  generateLesson(input: GenerateLessonInput!): UnitLesson!
  toggleCourseEnrollment(userId: String!, courseId: String!): CourseEnrollment!
  createUserDetails(userId: String!): UserDetails!
  updateUserDetails(
    userId: String!
    input: UpdateUserDetailsInput
  ): UserDetails!
  updateCurrentLessonId(input: UpdateCurrentLessonIdInput): CourseProgress!
  updateCompletedLessons(input: UpdateCompletedLessonsInput): CourseProgress!
  createQuizAttempt(input: CreateQuizAttemptInput): QuizAttempt!
  updateQuizAttempt(id: String!, input: UpdateQuizAttemptInput): QuizAttempt!
  updateQuizAttemptStatus(id: String!, status: Status): QuizAttempt!
}

type Subscription {
  prereqsGenerated: [CoursePrereq]!
  unitsGenerated: [CourseUnit]!
}
