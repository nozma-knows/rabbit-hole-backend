// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PrereqTopic {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  prereqId    String
  prereq      CoursePrereq @relation(fields: [prereqId], references: [id], onDelete: Cascade)
  title       String
  description String
}

model CoursePrereq {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  courseId    String
  course      Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  description String
  topics      PrereqTopic[]
}

model UnitLesson {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  unitId    String
  unit      CourseUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  title     String
  topics    String
  content   String
  order     Int        @default(0)
}

model UnitExercise {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  unitId    String
  unit      CourseUnit @relation(fields: [unitId], references: [id], onDelete: Cascade)
  task      String
}

model QuizQuestion {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  quizId       String
  quiz         UnitQuiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question     String
  choices      String[]
  answer       String
  QuizResponse QuizResponse[]
}

model UnitQuiz {
  id          String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  unitId      String
  unit        CourseUnit     @relation(fields: [unitId], references: [id], onDelete: Cascade)
  questions   QuizQuestion[]
  QuizAttempt QuizAttempt[]
}

model CourseUnit {
  id          String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  courseId    String
  course      Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title       String
  description String
  lessons     UnitLesson[]
  exercises   UnitExercise[]
  quizzes     UnitQuiz[]
  order       Int            @default(0)
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model QuizResponse {
  id            String       @id @default(uuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  response      String
  questionId    String
  question      QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quizAttemptId String?
  QuizAttempt   QuizAttempt? @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  status           Status
  attempt          Int
  responses        QuizResponse[]
  quizId           String
  quiz             UnitQuiz       @relation(fields: [quizId], references: [id], onDelete: Cascade)
  courseProgressId String
  courseProgress   CourseProgress @relation(fields: [courseProgressId], references: [id], onDelete: Cascade)

  @@unique([quizId, courseProgressId, attempt])
}

model CourseProgress {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  enrollmentId       String        @unique
  enrollment         Enrollment    @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lessonsCompleted   String[]
  exercisesCompleted String[]
  quizAttempts       QuizAttempt[]
  status             Status
  currentLessonId    String?
}

model Enrollment {
  id        String          @id @default(uuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  userId    String
  courseId  String
  course    Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress  CourseProgress?

  @@unique([userId, courseId])
}

model Course {
  id          String         @id @default(uuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  authorId    String
  title       String
  description String
  prereqs     CoursePrereq[]
  units       CourseUnit[]
  enrollments Enrollment[]
  public      Boolean        @default(false)
}

model UserDetails {
  id             String    @id @default(uuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String    @unique
  firstName      String?
  lastName       String?
  nickname       String?
  dob            DateTime?
  pronouns       String[]
  educationLevel String?
  occupation     String?
  interests      String[]
  learningStyle  String?
  seenOnboarding Boolean   @default(false)
}
